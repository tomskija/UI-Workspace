name: CI/CD Pipeline - UI Workspace

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and type checking
  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint

  # Testing
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      env:
        NEXT_PUBLIC_WORKSPACE_NAME: UI-Workspace-Test
        NEXT_PUBLIC_WEATHER_API_URL: http://localhost:8000
        NEXT_PUBLIC_ENABLE_WEATHER_MODULE: true
        NEXT_PUBLIC_APP_ENV: test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # Backend health checks (optional, requires backends to be running)
  backend-health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check backend health
      run: npm run workspace:health
      env:
        NEXT_PUBLIC_WEATHER_API_URL: ${{ secrets.NEXT_PUBLIC_WEATHER_API_URL_STAGING }}
        NEXT_PUBLIC_ENABLE_WEATHER_MODULE: true

  # Build and push Docker images
  build-and-push:
    needs: [lint-and-type-check, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=staging,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NEXT_PUBLIC_WORKSPACE_NAME=UI-Workspace
          NEXT_PUBLIC_WEATHER_API_URL=${{ secrets.NEXT_PUBLIC_WEATHER_API_URL || 'https://weather-api.tomskija.dev' }}
          NEXT_PUBLIC_FINANCE_API_URL=${{ secrets.NEXT_PUBLIC_FINANCE_API_URL || 'https://finance-api.tomskija.dev' }}
          NEXT_PUBLIC_APP_ENV=production
          NEXT_PUBLIC_ENABLE_MULTI_BACKEND=true

  # Deploy to staging
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'staging')
    
    environment:
      name: staging
      url: https://staging-ui-workspace.tomskija.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Deploy to Vercel Staging
      run: |
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_WORKSPACE_NAME: UI-Workspace-Staging
        NEXT_PUBLIC_WEATHER_API_URL: ${{ secrets.NEXT_PUBLIC_WEATHER_API_URL_STAGING }}
        NEXT_PUBLIC_APP_ENV: staging
        NEXT_PUBLIC_ENABLE_WEATHER_MODULE: true

  # Deploy to production
  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'production')
    
    environment:
      name: production
      url: https://ui-workspace.tomskija.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Deploy to Vercel Production
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_WORKSPACE_NAME: UI-Workspace
        NEXT_PUBLIC_WEATHER_API_URL: ${{ secrets.NEXT_PUBLIC_WEATHER_API_URL }}
        NEXT_PUBLIC_FINANCE_API_URL: ${{ secrets.NEXT_PUBLIC_FINANCE_API_URL }}
        NEXT_PUBLIC_APP_ENV: production
        NEXT_PUBLIC_ENABLE_WEATHER_MODULE: true
        NEXT_PUBLIC_ENABLE_FINANCE_MODULE: ${{ secrets.NEXT_PUBLIC_ENABLE_FINANCE_MODULE }}
        NEXT_PUBLIC_ENABLE_MULTI_BACKEND: true

  # Performance audit
  lighthouse:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for deployment
      run: sleep 60
      
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging-ui-workspace.tomskija.dev
          https://staging-ui-workspace.tomskija.dev/weather
        configPath: ./lighthouserc.js
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Update workspace status
  update-status:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Update deployment status
      run: |
        echo "üöÄ UI Workspace Deployment Status:"
        echo "- Repository: https://github.com/tomskija/UI-Workspace"
        echo "- Production: https://ui-workspace.tomskija.dev"
        echo "- Staging: https://staging-ui-workspace.tomskija.dev"
        echo "- Docker: ghcr.io/tomskija/ui-workspace:latest"
        echo ""
        echo "üì° Connected Backends:"
        echo "- Weather: ${{ secrets.NEXT_PUBLIC_WEATHER_API_URL }}"
        echo "- Finance: ${{ secrets.NEXT_PUBLIC_FINANCE_API_URL || 'Not configured' }}"
        
  # Notify on failures
  notify-failure:
    needs: [lint-and-type-check, test, build-and-push, deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå UI Workspace deployment failed"
        echo "Check logs for details: https://github.com/tomskija/UI-Workspace/actions"
        # Add Slack/Discord notification here if desired